<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:https="http://www.mulesoft.org/schema/mule/https" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="CE-3.4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">

	<ftp:connector name="createPathFtpConnector" doc:name="FTP">
		<dispatcher-threading-profile
			doThreading="false" />
		<service-overrides
			dispatcherFactory="org.mule.transport.customftp.CreatePathFtpMessageDispatcherFactory"></service-overrides>
	</ftp:connector> 
	
    <flow name="landsat8MainDownloadFlow1" doc:name="landsat8MainDownloadFlow1" doc:description="LC80030172015001LGN00">
        <http:inbound-endpoint exchange-pattern="request-response" host="0.0.0.0" port="9091" path="download" doc:name="HTTP"/>
        <logger message="Start Download" level="INFO" doc:name="status"/>
        <set-payload value="#[json:results]" doc:name="Set Payload"/>
        <set-variable variableName="arrayListData" value="#[new java.util.ArrayList()]" doc:name="arrayListData"/>
        <foreach doc:name="For Each">
            <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
            <set-variable variableName="sceneID" value="#[payload.get(&quot;sceneID&quot;)]" doc:name="sceneID"/>
            <set-variable variableName="metadatiMap" value="#[new java.util.HashMap()]" doc:name="matadatiMap"/>
            <expression-component doc:name="Create Hashmap"><![CDATA[import java.util.Calendar;
import java.text.SimpleDateFormat;
java.util.HashMap location = new java.util.HashMap();
location.put('type' , 'Polygon');

java.util.ArrayList coordinatefinal = new java.util.ArrayList();
java.util.ArrayList coordinatefinal2 = new java.util.ArrayList();
java.util.ArrayList coordinate = new java.util.ArrayList();
java.util.ArrayList coordinate2 = new java.util.ArrayList();
java.util.ArrayList coordinate3 = new java.util.ArrayList();
java.util.ArrayList coordinate4 = new java.util.ArrayList();
java.util.ArrayList coordinate5 = new java.util.ArrayList();

coordinate.add(Float.parseFloat(payload.get("lowerRightCornerLongitude")));
coordinate.add(Float.parseFloat(payload.get("lowerRightCornerLatitude")));
coordinate2.add(Float.parseFloat(payload.get("upperRightCornerLongitude")));
coordinate2.add(Float.parseFloat(payload.get("upperRightCornerLatitude")));
coordinate3.add(Float.parseFloat(payload.get("upperLeftCornerLongitude")));
coordinate3.add(Float.parseFloat(payload.get("upperLeftCornerLatitude")));
coordinate4.add(Float.parseFloat(payload.get("lowerLeftCornerLongitude")));
coordinate4.add(Float.parseFloat(payload.get("lowerLeftCornerLatitude")));
coordinate5.add(Float.parseFloat(payload.get("lowerRightCornerLongitude")));
coordinate5.add(Float.parseFloat(payload.get("lowerRightCornerLatitude")));

coordinatefinal.add(coordinate);
coordinatefinal.add(coordinate2);
coordinatefinal.add(coordinate3);
coordinatefinal.add(coordinate4);
coordinatefinal.add(coordinate5);
coordinatefinal2.add(coordinatefinal);

location.put('coordinates' , coordinatefinal2);
metadatiMap.put('location',location);
metadatiMap.put('dateUpdated',payload.get("dateUpdated"));

metadatiMap.put('cloudCover',payload.get("cloudCover"));
metadatiMap.put('cloudCoverFull',payload.get("cloudCoverFull"));
metadatiMap.put('dayOrNight',payload.get("dayOrNight"));
metadatiMap.put('row',payload.get("row"));
metadatiMap.put("path",payload.get("path"));
metadatiMap.put("sceneID",payload.get("sceneID"));
if(payload.get("sceneStartTime").contains("-"))
{
metadatiMap.put('sceneStartTime',payload.get("sceneStartTime").replaceFirst(" ","T"));
metadatiMap.put('sceneStopTime',payload.get("sceneStopTime").replaceFirst(" ","T"));
}
else if(payload.get("sceneStartTime").contains(":"))
{
String sceneStartTime=payload.get("sceneStartTime");
String sceneStopTime=payload.get("sceneStopTime");
Calendar calendar = Calendar.getInstance();
calendar.set(Calendar.YEAR, Integer.parseInt(sceneStartTime.substring(0,4)));
calendar.set(Calendar.DAY_OF_YEAR, Integer.parseInt(sceneStartTime.substring(5,8)));
calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(sceneStartTime.substring(9,11)));
calendar.set(Calendar.MINUTE, Integer.parseInt(sceneStartTime.substring(12,14)));
calendar.set(Calendar.SECOND, Integer.parseInt(sceneStartTime.substring(15,17)));
String format1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS", Locale.ENGLISH).format(calendar.getTime());
metadatiMap.put('sceneStartTime',format1);
calendar.set(Calendar.YEAR, Integer.parseInt(sceneStopTime.substring(0,4)));
calendar.set(Calendar.DAY_OF_YEAR, Integer.parseInt(sceneStopTime.substring(5,8)));
calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(sceneStopTime.substring(9,11)));
calendar.set(Calendar.MINUTE, Integer.parseInt(sceneStopTime.substring(12,14)));
calendar.set(Calendar.SECOND, Integer.parseInt(sceneStopTime.substring(15,17)));
String format2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS", Locale.ENGLISH).format(calendar.getTime());
metadatiMap.put('sceneStopTime',format2);

}


arrayListData.add(metadatiMap);
]]></expression-component>
            <logger message="*******************#[metadatiMap]\n************#[payload.get(&quot;sceneStartTime&quot;)]" level="INFO" doc:name="Logger"/>
            <set-payload value="#[metadatiMap]" doc:name="Set Payload"/>
            <json:object-to-json-transformer doc:name="Object to JSON"/>
            <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9200" path="landsat/8/#[sceneID]" method="POST" doc:name="Insert ElasticSearch"/>
        </foreach>
        <set-payload value="#[arrayListData]" doc:name="Set Payload"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>

    </flow>
</mule>
