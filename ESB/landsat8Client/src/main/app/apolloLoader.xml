<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core"
	xmlns:context="http://www.springframework.org/schema/context" version="CE-3.4.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	
	<flow name="apolloLoaderFlow1" doc:name="apolloLoaderFlow1"
		processingStrategy="synchronous"
		doc:description="{
   &quot;directory&quot;:&quot;C:/FTP/TEST&quot;,
   &quot;aggregateId&quot;:&quot;4028d49d4bca7653014c73e35d6c091d&quot;
}">
		<logger message="Received Payload #[payload]" level="INFO"
			doc:name="Request Payload" />
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to HashMap"/>
		<set-variable variableName="apolloCrawlrPath" value="#[org.apache.commons.lang.StringEscapeUtils.escapeJava(payload.get(&quot;directory&quot;))]"
			doc:name="set apolloCrawlrPath (escaped)" />
		<set-variable variableName="apolloAggregateID" value="#[payload.get(&quot;aggregateId&quot;)]"
			doc:name="set apolloAggregateID" />
		<logger
			message="Apollo Crawler on #[apolloCrawlrPath] to aggregate ID #[apolloAggregateID]"
			level="INFO" doc:name="Launch Apollo Crawler" />
		<parse-template location="template_apollo_crawling_HTTP_request.json"
			doc:name="Parse Request Template" />
		<http:outbound-endpoint exchange-pattern="request-response"
			host="${apollo.host}" port="${apollo.port}"
			path="erdas-apollo/services/rpc?cmd=execute&amp;qualifier=com.erdas.apollo.dmbl.scheduling.BeanOperationScheduler&amp;operation=schedule&amp;asyncTime=0&amp;target=beanOperationScheduler"
			method="POST" user="${apollo.usr}" password="${apollo.pwd}" doc:name="Apollo Crawler"
			encoding="UTF-8" responseTimeout="30000"/>
		<object-to-string-transformer doc:name="Object to String" />
		<logger message="Apollo Crawler HTTP resp: #[message] #['\n']body: #[payload]"
			level="INFO" doc:name="HTTP Resp" />
		<set-variable variableName="crawlJobName"
			value="#[json:result/jobName]:#[json:result/jobGroup]" doc:name="crawlJobName" />
		<logger message="JobName: #[crawlJobName]" level="INFO"
			doc:name="crawlJobName" />
		<set-variable variableName="dfaStatus" value="START"
			doc:name="dfaStatus = START" />
		<flow-ref name="apolloJobFlow" doc:name="ApolloJobFlow Polling" />
        <set-payload value="#[dfaStatus]" doc:name="return dfaStatus"/>
		<logger
			message="!!!#[&quot;\n&quot;]!!!#[&quot;\n&quot;]!!!#[&quot;\n&quot;]JOB ENDED: #[dfaStatus] !!!#[&quot;\n&quot;]!!!#[&quot;\n&quot;]!!!#[&quot;\n&quot;]"
			level="INFO" doc:name="Logger" />
	</flow>
	<flow name="apolloJobFlow" doc:name="apolloJobFlow"
		processingStrategy="synchronous">
		<logger message="Checking Apollo Crawling Job Status ..."
			level="INFO" doc:name="Checking Job Status" />
		<processor-chain doc:name="Processor Chain">
			<set-payload value="{&quot;args&quot;:[&quot;#[crawlJobName]&quot;]}"
				doc:name="Set ReqBody" />

			<http:outbound-endpoint exchange-pattern="request-response"
				host="${apollo.host}" port="${apollo.port}" method="POST"
				doc:name="Check Crawling Job Status !?? " password="${apollo.pwd}"
				user="${apollo.usr}"
				path="erdas-apollo/services/rpc?cmd=execute&amp;qualifier=com.erdas.apollo.api.scheduling.JobManagementService&amp;operation=find&amp;asyncTime=0&amp;target=jobManager" />
			<json:json-to-object-transformer
				returnClass="java.util.HashMap" doc:name="JSON to HashMap" />

			<logger message="crawlJob body: #[payload]" level="DEBUG"
				doc:name="crawlJob resp" />
			<choice doc:name="Choice">

				<when
					expression="#[!payload.containsKey(&quot;result&quot;) &amp;&amp; dfaStatus != &quot;START&quot;]">
					<logger
						message="SUCCESSFUL CRAWLING (precStatus==STATUS and !hasResult): dfaStatus: #[dfaStatus] and newStatus: DONE #['\n']Retry Crawling Status Check STOPPED."
						level="INFO" doc:name="Successful Crawling Status" />
					<set-variable variableName="dfaStatus" value="DONE"
						doc:name="dfaStatus = DONE" />

				</when>
				<when expression="#[dfaStatus == &quot;ERROR&quot;]">
					<logger level="INFO" doc:name="ERROR Status"
						message="ERROR!!!   dfaStatus = #[dfaStatus]" />

				</when>
				<when expression="#[payload.containsKey(&quot;result&quot;)]">
					<logger
						message="hasResult: new dfaStatus: #[payload.get(&quot;result&quot;).get(&quot;state&quot;).get(&quot;value&quot;)]"
						level="INFO" doc:name="New Crawling Status" />
					<set-variable variableName="dfaStatus"
						value="#[payload.get(&quot;result&quot;).get(&quot;state&quot;).get(&quot;value&quot;)]"
						doc:name="dfaStatus = STATUS" />
                    <scripting:component doc:name="Retry delay (2s)">
                        <scripting:script engine="Groovy"><![CDATA[sleep(2000)]]></scripting:script>
                    </scripting:component>
					<flow-ref name="apolloJobFlow" doc:name="Retry Apollo Job Check" />
				</when>
				<otherwise>
					<logger
						message="Ingnored Crawling Status ( dfaStatus: #[dfaStatus] and hasResult: #[payload.containsKey(&quot;result&quot;)] )"
						level="INFO" doc:name="Ingnored Crawling Status" />
				</otherwise>
			</choice>
		</processor-chain>
	</flow>
</mule>
