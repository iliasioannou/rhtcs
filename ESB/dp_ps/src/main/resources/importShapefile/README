======================================
Struttura delle tabelle  
======================================


-- Elimino le tabelle a cascata

DROP VIEW ps_user;
DROP TABLE ps_measure;
DROP TABLE ps;
DROP TABLE ps_dataset_products;
DROP TABLE ps_dataset_metadata_algo_params;
DROP TABLE ps_dataset_metadata;

-- Creo le tabelle

CREATE TABLE ps_dataset_metadata
(
  datasetid text NOT NULL,
  algorithmname text,
  algorithmdescription text,
  algorithmversion text,
  license text,
  timestampelaborationstart timestamp with time zone,
  timestampelaborationend timestamp with time zone,
  supermaster text,
  timestampinsert timestamp with time zone DEFAULT now(),
  CONSTRAINT "ps_dataset_metadata_PK" PRIMARY KEY (datasetid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps_dataset_metadata
  OWNER TO postgres;

CREATE TABLE ps_dataset_metadata_algo_params
(
  datasetid text NOT NULL,
  code text NOT NULL,
  description text NOT NULL,
  val text NOT NULL,
  CONSTRAINT "ps_dataset_metadata_algo_params_PK" PRIMARY KEY (datasetid, code),
  CONSTRAINT ps_dataset_metadata_algo_params_fkey FOREIGN KEY (datasetid)
      REFERENCES ps_dataset_metadata (datasetid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps_dataset_metadata_algo_params
  OWNER TO postgres;

CREATE TABLE ps_dataset_products
(
  datasetid text NOT NULL,
  productid text NOT NULL,
  CONSTRAINT "ps_dataset_product_PK" PRIMARY KEY (datasetid, productid),
  CONSTRAINT ps_dataset_products_fkey FOREIGN KEY (datasetid)
      REFERENCES ps_dataset_metadata (datasetid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps_dataset_products
  OWNER TO postgres;

CREATE TABLE ps
(
  id serial NOT NULL,
  psid text NOT NULL,
  lat double precision,
  lon double precision,
  datasetid text NOT NULL,
  sensorid text NOT NULL,
  coherence double precision,
  geom geometry(Point,4326),
  height double precision,
  velocity double precision,
  CONSTRAINT "PK" PRIMARY KEY (datasetid, psid),
  CONSTRAINT ps_fkey FOREIGN KEY (datasetid)
      REFERENCES ps_dataset_metadata (datasetid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT sensorid CHECK (sensorid = 'S01'::text OR sensorid = 'CSM01'::text)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps
  OWNER TO postgres;


CREATE TABLE ps_measure
(
  datasetid text NOT NULL,
  psid text NOT NULL,
  type text NOT NULL,
  data date,
  measure double precision,
  CONSTRAINT ps_measure_datasetid_fkey FOREIGN KEY (datasetid, psid)
      REFERENCES ps (datasetid, psid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT type_check CHECK (type = 'DL'::text OR type = 'VAL'::text OR type = 'VASDL'::text)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps_measure
  OWNER TO postgres;



CREATE OR REPLACE VIEW ps_user AS 
 SELECT a.id, a.psid, a.lat, a.lon, a.datasetid, a.sensorid, a.coherence, a.geom, a.height, a.velocity, b.id AS user_id, c.id AS deal_id, c.geom AS user_aoi
   FROM ps a, "user" b, deal c
  WHERE b.id = c.user_id AND st_within(c.geom, a.geom);

ALTER TABLE ps_user
  OWNER TO postgres;

======================================
Import dello shapefile dei PS 
======================================

L'import dello shapefile fa uso di un job, che richiama due trasformation, di GeoKettle (ver 3.5).
Il job (kjb) e le trasformation (ktr) si trovano nella cartella geokettle e sono:
- rheticus_ps_import.kjb
- rheticus_ps_import_ps_into_db.ktr
- rheticus_ps_import_measure_into_db.ktr

L'esecuzione del job avviene tramite la classe:
it.planetek.rheticus.mule.components.LauncherKettleJob

Tale classe fa uso di due parametri:
- datasetId: id del dataset a cui si riferiscono i PS
- shapefileName: nome dello shapefile (con estensione .shp) dei PS

Tali parametri vanno impostati nel flusso Mule prima di richiamare la classe java:

    <set-variable doc:name="datasetId" variableName="datasetId" value="XXXXXXXXXXX"/>
    <set-variable doc:name="shapefileName" variableName="shapefileName" value="XXXXXXXXXXX"/>
    <component class="it.planetek.rheticus.mule.components.LauncherKettleJob" doc:name="Java"/>

I parametri di configurazione per il lancio del job GeoKettle vengono impostati nel file di configurazione dp_ps.properties


#--------------------------------------------
#Import PS shapefile
#NB: change path separator for Linux/Windows OS

#import.shapefile.kettle.app.folder=C:\\geokettle-2.5
import.shapefile.kettle.app.folder=/usr/local/geokettle-2.5
import.shapefile.kettle.app.name=kitchen
#directory that contains the job to run
#import.shapefile.kettle.job.folder=C:\\rheticus\\import_PS
import.shapefile.kettle.job.folder=/var/pkt284/importPS/geokettle
#name of job to run
import.shapefile.kettle.job.name=rheticus_ps_import.kjb
#LogLevel: Error, Nothing, Minimal, Basic, Detailed, Debug, Rowlevel
import.shapefile.kettle.job.log.level=Basic

#import.shapefile.db.host=localhost
import.shapefile.db.host=kim.planetek.it
import.shapefile.db.port=5432
import.shapefile.db.name=RHETICUS
#folder where find the shapefile to import. The name of shapefile to import (with .shp extention) is setted into VAR_SHP_NAME variable
#import.shapefile.folder=C:\\rheticus\\import_PS\\files
import.shapefile.folder=/var/pkt284/importPS
import.shapefile.db.table_commit_size=5000     


------------------------------
Lancio manuale del job ETL GeoKettle

/opt/geokettle-2.5/kitchen.sh -file=/opt/geokettle-jobs/rheticus_ps_import.kjb -param:VAR_RHETICUS_DB_HOST=localhost -param:VAR_RHETICUS_DB_PORT=5432 -param:VAR_RHETICUS_DB_NAME=RHETICUS -param:VAR_RHETICUS_DB_USER=postgres -param:VAR_RHETICUS_DB_PASSWORD=postgres -param:VAR_RHETICUS_IMPORT_PS_FOLDER=/home/coletta/importPS/niscemi/Stack4_SPINUA_Sentinel_ASC_Niscemi_Coh095 -param:VAR_DATASETID=Sentinel-1IWIW1-IW2-IW3117117ASCENDINGVV-VHSSLC1237.5 -param:VAR_SENSORID=S01 -param:VAR_SHP_NAME=SPINUA_Sentinel_ASC.shp -level:Basic







