<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp" xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd">

	<context:property-placeholder location="classpath*:dp_ps.properties"
		system-properties-mode="OVERRIDE" />
	<spring:beans>
		<spring:bean id="psProps"
			class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<spring:property name="singleton" value="true" />
			<spring:property name="location" value="classpath:dp_ps.properties" />
		</spring:bean>
	</spring:beans>

	<http:listener-config name="HTTP_Listener_Configuration"
		host="${dp.ps.host}" port="${dp.ps.port}" basePath="${dp.ps.path}"
		doc:name="HTTP Listener Configuration" />
	<http:request-config name="HTTP_Request_Configuration"
		host="${elasticsearch.host}" port="${elasticsearch.rest.port}"
		basePath="${elasticsearch.sentinel.path}" doc:name="HTTP Request Configuration" />
	<jms:activemq-connector name="Active_MQ"
		validateConnections="true" doc:name="Active MQ" brokerURL="tcp://127.0.0.1:61616" persistentDelivery="true"/>
	<jms:object-to-jmsmessage-transformer
		name="Object_to_JMSMessage" doc:name="Object to JMSMessage" />
	<expression-transformer
		expression="payload.setJMSType(&quot;L0&quot;); return payload;" name="ExpressionAddJmsType"
		doc:name="Expression to add JmsTypeL0" />
    
    <expression-transformer 
    	expression="payload.setJMSType(&quot;L1&quot;); return payload;" name="addPropertyTypeL1" 
    	doc:name="Expression to add JmsTypeL1"/>
    

	<flow name="dp_psFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/" allowedMethods="POST" doc:name="Receive new Sen1 acquisitions">
			<http:response-builder statusCode="200" />
		</http:listener>
		<async doc:name="Async">
			<json:json-to-object-transformer
				returnClass="java.util.ArrayList" doc:name="JSON to ArrayList" />
			<set-variable variableName="datasetSet" value="#[new java.util.HashSet()]"
				doc:name="init datasetSet" />
			<foreach doc:name="For Each new data">
				<set-variable variableName="datasetId"
					value="#[payload.get(&quot;datasetId&quot;)]" doc:name="Extract data datasetId" />
				<expression-filter expression="!datasetSet.contains(datasetId)"
					doc:name="Filter NOT yet processed dataset" />
				<expression-component doc:name="add datasetId to datasetSet"><![CDATA[datasetSet.add(datasetId);]]></expression-component>
				<set-payload
					value="{ &quot;query&quot;: { &quot;match&quot;: {&quot;datasetId&quot;:&quot;#[datasetId]&quot; } } }"
					doc:name="Get full data list for current dataset" />
				<flow-ref name="elasticSearchFlow" doc:name="elasticSearchFlow" />
                <logger message="Launching processing flow for dataset #[datasetId]" level="INFO" doc:name="Process Dataset"/>
				<flow-ref name="dp_ps_datasetFlow" doc:name="dp_ps_datasetFlow" />
			</foreach>
			<logger message="End" level="INFO" doc:name="End" />
		</async>
		<set-payload value="200 OK" doc:name="HTTP return" />
        <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy when="exception.causedExactlyBy(org.mule.api.routing.filter.FilterUnacceptedException)" enableNotifications="false" doc:name="Catch JMS message-failed">
                <logger message="Processor failure for dataset #[datasetId], cause: &quot;#[message.inboundProperties.'message-failed']&quot;" level="INFO" doc:name="Processor failure from JMS"/>
                <logger level="INFO" doc:name="Full Message"/>
            </catch-exception-strategy>
        </choice-exception-strategy>
	</flow>
	
	
	<sub-flow name="dp_ps_datasetFlow">
		<logger message="DATASETID: #[datasetId]" level="INFO"
			doc:name="Show datasetId" />
		<set-variable variableName="datasetDataArrayList" value="#[payload]"
			doc:name="save datasetDataArrayList" />
		<set-payload
			value="{  &quot;query&quot;: {    &quot;bool&quot;: {      &quot;must&quot;: [        { &quot;match&quot;: { &quot;datasetId&quot;:  &quot;#[datasetId]&quot; }},        { &quot;match&quot;: { &quot;superMaster&quot;: &quot;true&quot;   }}      ]    }  }}"
			doc:name="Query getsuperMaster" />
		<http:request config-ref="HTTP_Request_Configuration"
			path="/_search" method="POST" doc:name="ElasticSearch" />
		<set-variable variableName="resSize" value="#[json:hits/total]"
			doc:name="resSize" />
		<choice doc:name="SuperMaster exists?">
			<when expression="#[resSize.equals('1') ]">
				<logger message="***********SuperMaster exist**************"
					level="INFO" doc:name="SuperMaster exist" />
				<set-variable variableName="superMasterId"
					value="#[json:hits/hits[0]/_source/uuid]" doc:name="superMasterId" />
			</when>
			<otherwise>
				<logger message="***********SuperMaster not exist**************"
					level="INFO" doc:name="SuperMaster not exist" />
				<set-payload value="#[datasetDataArrayList]" doc:name="Set Payload to datasetDataArrayList" />
				<json:object-to-json-transformer
					doc:name="ArrayList to JSON" />
				<logger message="**********Call Processor Calculate SuperMaster"
					level="INFO" doc:name="Call SuperMaster Processor" />
					<set-variable doc:name="logstash" variableName="logstash" value="{&quot;processor&quot;: &quot;PS&quot;, &quot;datasetId&quot;: &quot;#[datasetId]&quot;, &quot;step&quot;: &quot;L0&quot;, &quot;status&quot;: &quot;PROGRESS&quot;, &quot;message&quot;:&quot;Calcolo superMaster in corso&quot;}"/>
					<component class="it.planetek.rheticus.mule.components.Logstash" doc:name="Java"/>
				<request-reply doc:name="Request-Reply" timeout="10000">
				
					<jms:outbound-endpoint queue="rheticus.processor.ps.request.L0" connector-ref="Active_MQ" doc:name="ps.request L0"  />
					<jms:inbound-endpoint queue="rheticus.processor.ps.reply.L0" connector-ref="Active_MQ" doc:name="ps.reply L0">
						
					</jms:inbound-endpoint>
				</request-reply>
                <message-filter throwOnUnaccepted="true" doc:name="If not message-failed (else Exception!)">
                    <message-property-filter pattern="message-failed=null" caseSensitive="true" scope="inbound"/>
                </message-filter>
                <set-variable variableName="superMasterId" value="#[json:superMasterId]" doc:name="superMasterId"/>
                <set-variable doc:name="logstash" variableName="logstash" value="{&quot;processor&quot;: &quot;PS&quot;, &quot;datasetId&quot;: &quot;#[datasetId]&quot;, &quot;step&quot;: &quot;L0&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;message&quot;:&quot;superMaster individuata:#[superMasterId]&quot;}"/>
					<component class="it.planetek.rheticus.mule.components.Logstash" doc:name="Java"/>
                <set-payload value="{    &quot;doc&quot; : {        &quot;superMaster&quot; : true    }}" doc:name="Update SM value"/>
                <http:request config-ref="HTTP_Request_Configuration" path="/#[superMasterId]/_update" method="POST" doc:name="ElasticSearch"/>
			</otherwise>
		</choice>
		<logger message="********superMasterId: #[superMasterId]"
			level="INFO" doc:name="superMasterId" />
		<logger message="*********Create Json for S1TB**********"
			level="INFO" doc:name="Create Json for S1TB" />
		<set-variable variableName="mapForS1TB" value="#[new java.util.HashMap()]"
			doc:name="mapForS1TB" />
		<set-variable variableName="callbackUri"
			value="${planetek.callbackUri.host}:${planetek.callbackUri.port}/${planetek.callbackUri.path}"
			doc:name="callbackUri" />
		<set-variable variableName="requestId"
			value="#[datasetId]-#[server.dateTime]" doc:name="requestId" />
		<expression-component doc:name="populate mapForS1TB"><![CDATA[mapForS1TB.put("datasetId", datasetId);
mapForS1TB.put("requestId", requestId);
mapForS1TB.put("superMasterId", superMasterId);
mapForS1TB.put("callbackUri", callbackUri);
mapForS1TB.put("data", datasetDataArrayList);
]]></expression-component>
		<set-payload value="#[mapForS1TB]" doc:name="mapForS1TB" />
		<json:object-to-json-transformer
			doc:name="Object to JSON" />
		<logger message="******Call S1TB " level="INFO" doc:name="Call S1TB " />
		<set-variable doc:name="logstash" variableName="logstash" value="{&quot;processor&quot;: &quot;PS&quot;, &quot;datasetId&quot;: &quot;#[datasetId]&quot;, &quot;step&quot;: &quot;L1&quot;, &quot;status&quot;: &quot;PROGRESS&quot;, &quot;message&quot;:&quot;Produzione di Interferogrammi in corso&quot;}"/>
					<component class="it.planetek.rheticus.mule.components.Logstash" doc:name="Java"/>
		<request-reply doc:name="Request-Reply" timeout="60000">
			<jms:outbound-endpoint queue="rheticus.processor.ps.request.L1" connector-ref="Active_MQ" doc:name="ps.request L1" transformer-refs="Object_to_JMSMessage addPropertyTypeL1" />
			<jms:inbound-endpoint queue="rheticus.processor.ps.reply.L1"	connector-ref="Active_MQ" doc:name="ps.reply L1" >
					
			</jms:inbound-endpoint>
		</request-reply>
		<object-to-string-transformer doc:name="Object to String" />
		<set-variable doc:name="logstash" variableName="logstash" value="{&quot;processor&quot;: &quot;PS&quot;, &quot;datasetId&quot;: &quot;#[datasetId]&quot;, &quot;step&quot;: &quot;L1&quot;, &quot;status&quot;: &quot;#[payload]&quot;, &quot;message&quot;:&quot;Produzione di Interferogrammi completata&quot;}"/>
					<component class="it.planetek.rheticus.mule.components.Logstash" doc:name="Java"/>
		<logger message="Request response:  #[payload]" level="INFO"
			doc:name="Result S1TB" />
	</sub-flow>
</mule>
