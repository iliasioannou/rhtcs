-- SE è necessario cambiare l'owner degli oggetti del DB

psql -d RHETICUS_DEV -h kim.planetek.it -U postgres -At -c "SELECT 'ALTER TABLE '||schemaname||'.'||tablename||' OWNER TO rheticus;' FROM pg_tables WHERE schemaname = 'public';" -o table.txt
psql -d RHETICUS_DEV -h kim.planetek.it -U postgres -f table.txt

psql -d RHETICUS_DEV -h kim.planetek.it -U postgres -At -c "SELECT 'ALTER TABLE '||table_schema||'.'||table_name||' OWNER TO rheticus;' FROM information_schema.views WHERE table_schema = 'public';" -o view.txt
psql -d RHETICUS_DEV -h kim.planetek.it -U postgres -f view.txt


psql -d RHETICUS_DEV -h kim.planetek.it -U postgres -At -c "SELECT 'ALTER TABLE '||sequence_name||'.'||sequence_schema||' OWNER TO rheticus;' FROM information_schema.views WHERE sequence_schema = 'public';" -o sequence.txt
psql -d RHETICUS_DEV -h kim.planetek.it -U postgres -f view.txt


psql -d RHETICUS_DEV -h kim.planetek.it -U postgres -qAXt -c "select 'ALTER FUNCTION ' || n.nspname || '.' || p.proname || '(' || pg_catalog.pg_get_function_identity_arguments(p.oid) || ') OWNER TO rheticus;' from pg_proc p, pg_namespace n where p.pronamespace = n.oid and n.nspname = 'public'" -o function.sql
psql -d RHETICUS_DEV -h kim.planetek.it -U postgres -f function.sql



----------------------------------------------------------------------

-- L'utenza per il progetto rheticus è (username/password): rheticus/pkt284restiCUS

CREATE ROLE rheticus LOGIN
  ENCRYPTED PASSWORD 'md5492492ec32205320eacb92ce0d2685ba'
  NOSUPERUSER NOINHERIT NOCREATEDB NOCREATEROLE NOREPLICATION;
COMMENT ON ROLE rheticus IS 'Rheticus application user';



CREATE DATABASE "RHETICUS"
  WITH OWNER = rheticus
       ENCODING = 'UTF8'
       TABLESPACE = pg_default
       LC_COLLATE = 'it_IT.UTF-8'
       LC_CTYPE = 'it_IT.UTF-8'
       CONNECTION LIMIT = -1;

CREATE EXTENSION postgis
  SCHEMA public
  VERSION "2.1.2";

===========================================
-- Tabelle ps_dataset_metedata, ps, ps_measure
===========================================

-------------------------------------------
-- Table: ps_dataset_metadata
-------------------------------------------

-- DROP TABLE ps_dataset_metadata;

CREATE TABLE ps_dataset_metadata
(
  datasetid text NOT NULL,
  algorithmname text,
  algorithmdescription text,
  algorithmversion text,
  license text,
  timestampelaborationstart timestamp with time zone,
  timestampelaborationend timestamp with time zone,
  supermaster text,
  timestampinsert timestamp with time zone DEFAULT now(),
  CONSTRAINT "ps_dataset_metadata_PK" PRIMARY KEY (datasetid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps_dataset_metadata
  OWNER TO postgres;


-------------------------------------------
-- Table: ps_dataset_metadata_algo_params
-------------------------------------------

-- DROP TABLE ps_dataset_metadata_algo_params;

CREATE TABLE ps_dataset_metadata_algo_params
(
  datasetid text NOT NULL,
  code text NOT NULL,
  description text NOT NULL,
  val text NOT NULL,
  CONSTRAINT "ps_dataset_metadata_algo_params_PK" PRIMARY KEY (datasetid, code),
  CONSTRAINT ps_dataset_metadata_algo_params_fkey FOREIGN KEY (datasetid)
      REFERENCES ps_dataset_metadata (datasetid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps_dataset_metadata_algo_params
  OWNER TO postgres;


-------------------------------------------
-- Table: ps_dataset_products
-------------------------------------------

-- DROP TABLE ps_dataset_products;

CREATE TABLE ps_dataset_products
(
  datasetid text NOT NULL,
  productid text NOT NULL,
  CONSTRAINT "ps_dataset_product_PK" PRIMARY KEY (datasetid, productid),
  CONSTRAINT ps_dataset_products_fkey FOREIGN KEY (datasetid)
      REFERENCES ps_dataset_metadata (datasetid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps_dataset_products
  OWNER TO postgres;


-------------------------------------------
-- Table: ps
-------------------------------------------

-- DROP TABLE ps;

CREATE TABLE ps
(
  id serial NOT NULL,
  psid text NOT NULL,
  lat double precision,
  lon double precision,
  datasetid text NOT NULL,
  sensorid text NOT NULL,
  coherence double precision,
  geom geometry(Point,4326),
  height double precision,
  velocity double precision,
  CONSTRAINT "PK" PRIMARY KEY (datasetid, psid),
  CONSTRAINT ps_fkey FOREIGN KEY (datasetid)
      REFERENCES ps_dataset_metadata (datasetid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT sensorid CHECK (sensorid = 'S01'::text OR sensorid = 'CSK'::text)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps
  OWNER TO postgres;


-------------------------------------------
-- Table: ps_measure
-------------------------------------------

-- DROP TABLE ps_measure;

CREATE TABLE ps_measure
(
  datasetid text NOT NULL,
  psid text NOT NULL,
  type text NOT NULL,
  data date,
  measure double precision,
  CONSTRAINT ps_measure_datasetid_fkey FOREIGN KEY (datasetid, psid)
      REFERENCES ps (datasetid, psid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT type_check CHECK (type = 'DL'::text OR type = 'VAL'::text OR type = 'VASDL'::text)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ps_measure
  OWNER TO postgres;


-------------------------------------------
-- Function: get_geometry_as_geojson()
-------------------------------------------

-- DROP FUNCTION get_geometry_as_geojson();

CREATE OR REPLACE FUNCTION get_geometry_as_geojson()
  RETURNS trigger AS
$BODY$
BEGIN
  new.geom_geo_json := ST_AsGeoJSON(new.geom);
  RETURN new;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION get_geometry_as_geojson()
  OWNER TO postgres;


-------------------------------------------
-- Function: get_geometry_from_lat_lon()
-------------------------------------------

-- DROP FUNCTION get_geometry_from_lat_lon();

CREATE OR REPLACE FUNCTION get_geometry_from_lat_lon()
  RETURNS trigger AS
$BODY$
BEGIN
  new.geom := ST_MakePoint(new.lon, new.lat, new.elevation);
  RETURN new;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION get_geometry_from_lat_lon()
  OWNER TO postgres;


===========================================
-- Tabelle: meteo_stations, meteo_stations_measure
===========================================

-------------------------------------------
-- DROP TABLE meteo_stations;
-------------------------------------------

CREATE TABLE meteo_stations
(
  id text NOT NULL,
  codcountry text NOT NULL,
  cod text NOT NULL,
  description text NOT NULL,
  lat double precision,
  lon double precision,
  elevation integer,
  geom geometry,
  geom_geo_json text,
  CONSTRAINT "meteo_stations_PK" PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE meteo_stations
  OWNER TO postgres;

-- Trigger: tr_01_get_geometry_from_lat_lon on meteo_stations

-- DROP TRIGGER tr_01_get_geometry_from_lat_lon ON meteo_stations;

CREATE TRIGGER tr_01_get_geometry_from_lat_lon
  BEFORE INSERT OR UPDATE
  ON meteo_stations
  FOR EACH ROW
  EXECUTE PROCEDURE get_geometry_from_lat_lon();

-- Trigger: tr_02_get_geometry_as_geojson on meteo_stations

-- DROP TRIGGER tr_02_get_geometry_as_geojson ON meteo_stations;

CREATE TRIGGER tr_02_get_geometry_as_geojson
  BEFORE INSERT OR UPDATE
  ON meteo_stations
  FOR EACH ROW
  EXECUTE PROCEDURE get_geometry_as_geojson();


-------------------------------------------
-- Table: meteo_stations_measure
-------------------------------------------

-- DROP TABLE meteo_stations_measure;

CREATE TABLE meteo_stations_measure
(
  id serial NOT NULL,
  id_station text NOT NULL,
  data date,
  type text NOT NULL,
  measure double precision,
  CONSTRAINT meteo_stations_measure_fkey FOREIGN KEY (id_station)
      REFERENCES meteo_stations (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT type_check CHECK (type = 'precipitazioni_mm'::text OR type = 'temperatura_media_c'::text)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE meteo_stations_measure
  OWNER TO postgres;


-------------------------------------------
-- View: vw_meteo_stations_measure
-------------------------------------------

-- DROP VIEW vw_meteo_stations_measure;

CREATE OR REPLACE VIEW vw_meteo_stations_measure AS
 SELECT meteo_stations_measure.id_station,
    meteo_stations_measure.type,
    date_part('year'::text, meteo_stations_measure.data) AS y,
    date_part('month'::text, meteo_stations_measure.data) AS m,
    (((date_part('year'::text, meteo_stations_measure.data) || '-'::text) || lpad(date_part('month'::text, meteo_stations_measure.data)::text, 2, '0'::text)) || '-01'::text)::date AS data,
    round(avg(meteo_stations_measure.measure)::numeric, 1) AS measure
   FROM meteo_stations_measure
  GROUP BY meteo_stations_measure.id_station, meteo_stations_measure.type, date_part('year'::text, meteo_stations_measure.data), date_part('month'::text, meteo_stations_measure.data);

ALTER TABLE vw_meteo_stations_measure
  OWNER TO postgres;


===========================================
-- Tabelle user, deal
===========================================

--------------------------------------------
-- Table: "user"
--------------------------------------------

-- DROP TABLE "user";

CREATE TABLE "user"
(
  id serial NOT NULL,
  name character varying,
  surname character varying,
  company character varying,
  email character varying,
  username character varying,
  password character varying,
  CONSTRAINT pk_user PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE "user"
  OWNER TO postgres;


--------------------------------------------
-- Table: deal
--------------------------------------------

-- DROP TABLE deal;

CREATE TABLE deal
(
  id serial NOT NULL,
  seller_id character varying,
  signature_date date,
  product_id serial NOT NULL,
  product_name character varying,
  geom geometry,
  user_id serial NOT NULL,
  geom_geo_json character varying, -- Questa colonna viene alimentata mediante un trigger che prende il valore della colonna geom e la converte in GeoJson
  sensorid text NOT NULL,
  start_period date DEFAULT ('now'::text)::date,
  end_period date DEFAULT ('now'::text)::date,
  service_type character varying(50) DEFAULT 'displacement'::character varying,
  CONSTRAINT pk_deal PRIMARY KEY (id),
  CONSTRAINT fk_user FOREIGN KEY (user_id)
      REFERENCES "user" (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT end_period CHECK (start_period <= end_period),
  CONSTRAINT sensorid CHECK (sensorid = 'S01'::text OR sensorid = 'CSK'::text OR sensorid = 'TSX'::text),
  CONSTRAINT service_type CHECK (service_type::text = 'displacement'::text OR service_type::text = 'marine'::text)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE deal
  OWNER TO postgres;
COMMENT ON COLUMN deal.geom_geo_json IS 'Questa colonna viene alimentata mediante un trigger che prende il valore della colonna geom e la converte in GeoJson';


-- Index: fki_user

-- DROP INDEX fki_user;

CREATE INDEX fki_user
  ON deal
  USING btree
  (user_id);


-- Trigger: getgeometryasgeojson on deal

-- DROP TRIGGER getgeometryasgeojson ON deal;

CREATE TRIGGER getgeometryasgeojson
  BEFORE INSERT OR UPDATE
  ON deal
  FOR EACH ROW
  EXECUTE PROCEDURE getgeometryasgeojson();

--------------------------------------------
-- Table: deal_dataset
--------------------------------------------

-- DROP TABLE deal_dataset;

CREATE TABLE deal_dataset
(
  deal_id serial NOT NULL,
  dataset_id text NOT NULL,
  swath character varying(10) NOT NULL,
  polarisation character varying(5) NOT NULL,
  timestamp_last_acquisition_proc timestamp with time zone,
  dataset_prefix text,
  CONSTRAINT pk_deal_dataset PRIMARY KEY (deal_id, dataset_id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE deal_dataset
  OWNER TO rheticus;

--------------------------------------------
-- View: ps_user
--------------------------------------------

-- DROP VIEW ps_user;

SELECT a.id,
	a.psid,
	a.lat,
	a.lon,
	a.datasetid,
	a.sensorid,
	a.coherence,
	a.geom,
	a.height,
	a.velocity,
	b.id AS user_id,
	c.id AS deal_id,
	c.product_name AS ps_map_name,
	c.geom AS user_aoi
FROM ps a,
	"user" b,
	deal c
WHERE b.id = c.user_id AND st_within(a.geom, c.geom);

ALTER TABLE ps_user
	OWNER TO postgres;


--------------------------------------------
-- Insert data
--------------------------------------------

-- Insert utente anonymous con relativo contratto demo su Barritteri
WITH A AS(
        INSERT INTO "user"(name, surname, company, email, username, password)
                VALUES ('anonymous', 'anonymous', 'anonymous', 'anonymous@anonymous.it', 'anonymous', 'pwdanonymous')
                RETURNING id
)
INSERT INTO deal(seller_id, signature_date, product_name, geom, user_id, start_period, end_period, sensorid)
    SELECT 'barritteri_01', '2016-04-01', 'DEMOMAP_CSK_BARITTERI'
                , ST_GeomFromGeoJSON
                (
                '{
                        "type":"Polygon",
                        "coordinates":
                        [
                        [
                                [15.84,38.335],[15.86,38.335],[15.86,38.32],[15.84,38.32],[15.84,38.335]
                        ]
                        ],
                        "crs":{"type":"name","properties":{"name":"EPSG:4326"}}
                }'
                )
                , id
                , '2001-01-01'
                , '2016-01-01'
                , 'CSK'
        FROM A


-- Insert utente test su Trento
WITH A AS(
        INSERT INTO "user"(name, surname, company, email, username, password)
                VALUES ('utente', 'trento', 'Comune di Trento', 'comune@trento.it', 'trento', 'pwdtrento')
            RETURNING id
)
INSERT INTO deal(seller_id, signature_date, product_name, geom, user_id, start_period, end_period, sensorid)
    SELECT 'trento_sud', '2016-01-01', 'PRVTMAP_CSK_TRENTO_SUD'
                , ST_GeomFromGeoJSON
                (
                '{
                        "type":"Polygon",
                        "coordinates":
                        [
                        [
                                [11.12,46.035],[11.13,46.035],[11.13,46.036],[11.12,46.036],[11.12,46.035]
                        ]
                        ],
                        "crs":{"type":"name","properties":{"name":"EPSG:4326"}}
                }'
                )
                , id
                , '2001-01-01'
                , '2016-01-01'
                , 'CSK'
    FROM A;

WITH A AS(
        SELECT id FROM "user" WHERE username = 'trento'
)
INSERT INTO deal(seller_id, signature_date, product_name, geom, user_id, start_period, end_period, sensorid)
    SELECT 'trento_nord', '2016-03-01', 'PRVTMAP_CSK_TRENTO_NORD'
                , ST_GeomFromGeoJSON
                (
                '{
                        "type":"Polygon",
                        "coordinates":
                        [
                        [
							[11.14,46.09],[11.18,46.09],[11.18,46.06],[11.14,46.06],[11.14,46.09]
                        ]
                        ],
                        "crs":{"type":"name","properties":{"name":"EPSG:4326"}}
                }'
                )
                , id
                , '2001-01-01'
                , '2016-01-01'
                , 'CSK'
    FROM A